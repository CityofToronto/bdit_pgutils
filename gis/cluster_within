CREATE TYPE gis.gid_geom AS (
    gid TEXT,
    the_geom geometry);
    
CREATE TYPE gis.clustered_geom AS (
    gid TEXT,
    the_geom geometry,
    cluster_id int);
	
CREATE OR REPLACE FUNCTION gis.cluster_within(_geoms gis.gid_geom[], _radius integer)
RETURNS SETOF gis.clustered_geom AS
$BODY$

DECLARE
    srid int;
BEGIN

--If there's only 1 geom, don't bother with the loop.
IF array_length(_geoms,1)<2 THEN
    RETURN QUERY SELECT gid, the_geom, 1 FROM unnest(_geoms);
    RETURN;
END IF;

CREATE TEMPORARY TABLE IF NOT EXISTS geometries (LIKE gis.gid_geom) ON COMMIT DROP;


CREATE TEMPORARY TABLE clusters(
    geom_group geometry,
    ids TEXT[],
    cluster_id serial
    ) ON COMMIT DROP;


TRUNCATE geometries;
    --inserting geoms in
INSERT INTO geometries(gid, the_geom)
    (SELECT (unnest(_geoms)).* ); 

--Store the srid to reconvert geoms after, assumes all geoms have the same SRID
srid := ST_SRID(the_geom) FROM geometries LIMIT 1;

UPDATE geometries --transforming geoms to a UTM coordinate system so distances will be calculated in meters.
SET the_geom =  ST_TRANSFORM(the_geom,2952);
INSERT INTO clusters(geom_group, ids)
    (SELECT ST_COLLECT(the_geom), ARRAY_AGG(gid)
        FROM geometries GROUP BY the_geom --Groups together points which are at the same location
    );

CREATE INDEX geom_index
ON clusters
USING gist
(geom_group);

Analyze clusters;

LOOP
    --If the shortest maximum distance between two clusters is greater than 2x the specified radius, then end the clustering algorithm.
    IF (SELECT ST_MaxDistance(a.geom_group,b.geom_group)  FROM clusters a, clusters b
        WHERE 
        ST_DFullyWithin(a.geom_group,b.geom_group, 2 * _radius)
        AND a.cluster_id < b.cluster_id AND a.cluster_id > 0 AND b.cluster_id > 0
        ORDER BY ST_MaxDistance(a.geom_group,b.geom_group) LIMIT 1)
        IS NULl
    THEN
        EXIT;
    END IF;

    --Periodically reindex the clusters table
    ANALYZE clusters;

    WITH finding_nearest_clusters AS(
    SELECT DISTINCT ON (a.cluster_id) a.cluster_id, ST_collect(a.geom_group,b.geom_group) AS geom_group, ARRAY[a.cluster_id,b.cluster_id] as joined_clusters, a.ids||b.ids AS ids
    FROM clusters a, clusters b
        WHERE ST_DFullyWithin(a.geom_group,b.geom_group, 2 * _radius)
            AND a.cluster_id < b.cluster_id AND a.cluster_id > 0 AND b.cluster_id > 0
        ORDER BY a.cluster_id, ST_MaxDistance(a.geom_group,b.geom_group)
    )
    --If a cluster is linked to multiple nearest clusters, select only the shortest distance pairing, and flag the others.
    , unique_clusters AS(
    SELECT a.*, CASE WHEN ST_AREA(ST_MinimumBoundingCircle(a.geom_group))>= ST_AREA(ST_MinimumBoundingCircle(b.geom_group)) THEN 1 ELSE 0 END as repeat_flag 
    FROM finding_nearest_clusters a
    LEFT OUTER JOIN finding_nearest_clusters b ON a.cluster_id <> b.cluster_id AND a.joined_clusters && b.joined_clusters 
    )       
        --Update the set of clusters with the new clusters
    UPDATE clusters o SET 
        --Set to 0 the cluster_id of the cluster which will contain 0 data.
        cluster_id = CASE WHEN o.cluster_id = joined_clusters[2] THEN 0 ELSE joined_clusters[1] END
        ,geom_group = CASE WHEN o.cluster_id = joined_clusters[2] THEN NULL ELSE f.geom_group END
        ,ids = CASE WHEN o.cluster_id = joined_clusters[2] THEN NULL ELSE f.ids END
        FROM (SELECT DISTINCT ON (cluster_id) cluster_id, geom_group, joined_clusters, ids, repeat_flag
            FROM unique_clusters 
            ORDER BY cluster_id, repeat_flag DESC
            ) f
        WHERE o.cluster_id = ANY (joined_clusters) AND repeat_flag =0;

    IF (SELECT COUNT(DISTINCT cluster_id) FROM clusters) < 2    THEN
        EXIT;                           
    END IF;

END LOOP;

RETURN QUERY 
    SELECT gid::TEXT, ST_TRANSFORM(the_geom, srid), cluster_id 
    FROM geometries
    inner join (select cluster_id, unnest(ids) AS gid FROM clusters)c USING (gid);
END;
$BODY$
LANGUAGE plpgsql;


GRANT EXECUTE ON FUNCTION gis.cluster_within(gis.gid_geom[],  integer) TO bdit_humans;
COMMENT ON FUNCTION gis.cluster_within(gis.gid_geom[],  integer) IS 
$$Bottom up hierarchical clustering function that clusters geometries based on a maximum distance of _radius.
usage:
WITH subq AS(
    SELECT ARRAY_AGG((gid, the_geom)::pt) AS points
    FROM data
    GROUP BY collection_id)
SELECT (clusters).* FROM 
    (SELECT buc(points, radius) AS clusters FROM subq
) y;$$;
